// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/egasimov/nebula-go-sdk/nebula/storage"
	mock "github.com/stretchr/testify/mock"
)

// InternalStorageService is an autogenerated mock type for the InternalStorageService type
type InternalStorageService struct {
	mock.Mock
}

// ChainAddEdges provides a mock function with given fields: ctx, req
func (_m *InternalStorageService) ChainAddEdges(ctx context.Context, req *storage.ChainAddEdgesRequest) (*storage.ExecResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChainAddEdges")
	}

	var r0 *storage.ExecResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.ChainAddEdgesRequest) (*storage.ExecResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.ChainAddEdgesRequest) *storage.ExecResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ExecResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.ChainAddEdgesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainDeleteEdges provides a mock function with given fields: ctx, req
func (_m *InternalStorageService) ChainDeleteEdges(ctx context.Context, req *storage.ChainDeleteEdgesRequest) (*storage.ExecResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChainDeleteEdges")
	}

	var r0 *storage.ExecResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.ChainDeleteEdgesRequest) (*storage.ExecResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.ChainDeleteEdgesRequest) *storage.ExecResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ExecResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.ChainDeleteEdgesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainUpdateEdge provides a mock function with given fields: ctx, req
func (_m *InternalStorageService) ChainUpdateEdge(ctx context.Context, req *storage.ChainUpdateEdgeRequest) (*storage.UpdateResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChainUpdateEdge")
	}

	var r0 *storage.UpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.ChainUpdateEdgeRequest) (*storage.UpdateResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.ChainUpdateEdgeRequest) *storage.UpdateResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.UpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.ChainUpdateEdgeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInternalStorageService creates a new instance of InternalStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInternalStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *InternalStorageService {
	mock := &InternalStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
