// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	meta "github.com/egasimov/nebula-sirius/nebula/meta"
	mock "github.com/stretchr/testify/mock"
)

// MetaService is an autogenerated mock type for the MetaService type
type MetaService struct {
	mock.Mock
}

// AddHosts provides a mock function with given fields: ctx, req
func (_m *MetaService) AddHosts(ctx context.Context, req *meta.AddHostsReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddHosts")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AddHostsReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AddHostsReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AddHostsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddHostsIntoZone provides a mock function with given fields: ctx, req
func (_m *MetaService) AddHostsIntoZone(ctx context.Context, req *meta.AddHostsIntoZoneReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddHostsIntoZone")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AddHostsIntoZoneReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AddHostsIntoZoneReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AddHostsIntoZoneReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddListener provides a mock function with given fields: ctx, req
func (_m *MetaService) AddListener(ctx context.Context, req *meta.AddListenerReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddListener")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AddListenerReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AddListenerReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AddListenerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentHeartbeat provides a mock function with given fields: ctx, req
func (_m *MetaService) AgentHeartbeat(ctx context.Context, req *meta.AgentHBReq) (*meta.AgentHBResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AgentHeartbeat")
	}

	var r0 *meta.AgentHBResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AgentHBReq) (*meta.AgentHBResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AgentHBReq) *meta.AgentHBResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.AgentHBResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AgentHBReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlterEdge provides a mock function with given fields: ctx, req
func (_m *MetaService) AlterEdge(ctx context.Context, req *meta.AlterEdgeReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AlterEdge")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterEdgeReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterEdgeReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AlterEdgeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlterSpace provides a mock function with given fields: ctx, req
func (_m *MetaService) AlterSpace(ctx context.Context, req *meta.AlterSpaceReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AlterSpace")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterSpaceReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterSpaceReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AlterSpaceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlterTag provides a mock function with given fields: ctx, req
func (_m *MetaService) AlterTag(ctx context.Context, req *meta.AlterTagReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AlterTag")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterTagReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterTagReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AlterTagReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlterUser provides a mock function with given fields: ctx, req
func (_m *MetaService) AlterUser(ctx context.Context, req *meta.AlterUserReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AlterUser")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterUserReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AlterUserReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AlterUserReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePassword provides a mock function with given fields: ctx, req
func (_m *MetaService) ChangePassword(ctx context.Context, req *meta.ChangePasswordReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ChangePasswordReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ChangePasswordReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ChangePasswordReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearSpace provides a mock function with given fields: ctx, req
func (_m *MetaService) ClearSpace(ctx context.Context, req *meta.ClearSpaceReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ClearSpace")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ClearSpaceReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ClearSpaceReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ClearSpaceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackup provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateBackup(ctx context.Context, req *meta.CreateBackupReq) (*meta.CreateBackupResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackup")
	}

	var r0 *meta.CreateBackupResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateBackupReq) (*meta.CreateBackupResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateBackupReq) *meta.CreateBackupResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.CreateBackupResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateBackupReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEdge provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateEdge(ctx context.Context, req *meta.CreateEdgeReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdge")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateEdgeReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateEdgeReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateEdgeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEdgeIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateEdgeIndex(ctx context.Context, req *meta.CreateEdgeIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdgeIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateEdgeIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateEdgeIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateEdgeIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFTIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateFTIndex(ctx context.Context, req *meta.CreateFTIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateFTIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateFTIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateFTIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateFTIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateSession(ctx context.Context, req *meta.CreateSessionReq) (*meta.CreateSessionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *meta.CreateSessionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSessionReq) (*meta.CreateSessionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSessionReq) *meta.CreateSessionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.CreateSessionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateSessionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateSnapshot(ctx context.Context, req *meta.CreateSnapshotReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSnapshotReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSnapshotReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateSnapshotReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpace provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateSpace(ctx context.Context, req *meta.CreateSpaceReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSpace")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSpaceReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSpaceReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateSpaceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpaceAs provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateSpaceAs(ctx context.Context, req *meta.CreateSpaceAsReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSpaceAs")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSpaceAsReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateSpaceAsReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateSpaceAsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateTag(ctx context.Context, req *meta.CreateTagReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateTagReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateTagReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateTagReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTagIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateTagIndex(ctx context.Context, req *meta.CreateTagIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTagIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateTagIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateTagIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateTagIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *MetaService) CreateUser(ctx context.Context, req *meta.CreateUserReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateUserReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.CreateUserReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.CreateUserReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DivideZone provides a mock function with given fields: ctx, req
func (_m *MetaService) DivideZone(ctx context.Context, req *meta.DivideZoneReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DivideZone")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DivideZoneReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DivideZoneReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DivideZoneReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropEdge provides a mock function with given fields: ctx, req
func (_m *MetaService) DropEdge(ctx context.Context, req *meta.DropEdgeReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropEdge")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropEdgeReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropEdgeReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropEdgeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropEdgeIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) DropEdgeIndex(ctx context.Context, req *meta.DropEdgeIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropEdgeIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropEdgeIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropEdgeIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropEdgeIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropFTIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) DropFTIndex(ctx context.Context, req *meta.DropFTIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropFTIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropFTIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropFTIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropFTIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropHosts provides a mock function with given fields: ctx, req
func (_m *MetaService) DropHosts(ctx context.Context, req *meta.DropHostsReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropHosts")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropHostsReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropHostsReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropHostsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropSnapshot provides a mock function with given fields: ctx, req
func (_m *MetaService) DropSnapshot(ctx context.Context, req *meta.DropSnapshotReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropSnapshot")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropSnapshotReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropSnapshotReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropSnapshotReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropSpace provides a mock function with given fields: ctx, req
func (_m *MetaService) DropSpace(ctx context.Context, req *meta.DropSpaceReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropSpace")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropSpaceReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropSpaceReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropSpaceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropTag provides a mock function with given fields: ctx, req
func (_m *MetaService) DropTag(ctx context.Context, req *meta.DropTagReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropTag")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropTagReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropTagReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropTagReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropTagIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) DropTagIndex(ctx context.Context, req *meta.DropTagIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropTagIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropTagIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropTagIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropTagIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropUser provides a mock function with given fields: ctx, req
func (_m *MetaService) DropUser(ctx context.Context, req *meta.DropUserReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropUser")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropUserReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropUserReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropUserReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropZone provides a mock function with given fields: ctx, req
func (_m *MetaService) DropZone(ctx context.Context, req *meta.DropZoneReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DropZone")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropZoneReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.DropZoneReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.DropZoneReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx, req
func (_m *MetaService) GetConfig(ctx context.Context, req *meta.GetConfigReq) (*meta.GetConfigResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *meta.GetConfigResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetConfigReq) (*meta.GetConfigResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetConfigReq) *meta.GetConfigResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetConfigResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetConfigReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEdge provides a mock function with given fields: ctx, req
func (_m *MetaService) GetEdge(ctx context.Context, req *meta.GetEdgeReq) (*meta.GetEdgeResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetEdge")
	}

	var r0 *meta.GetEdgeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetEdgeReq) (*meta.GetEdgeResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetEdgeReq) *meta.GetEdgeResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetEdgeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetEdgeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEdgeIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) GetEdgeIndex(ctx context.Context, req *meta.GetEdgeIndexReq) (*meta.GetEdgeIndexResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetEdgeIndex")
	}

	var r0 *meta.GetEdgeIndexResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetEdgeIndexReq) (*meta.GetEdgeIndexResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetEdgeIndexReq) *meta.GetEdgeIndexResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetEdgeIndexResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetEdgeIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetaDirInfo provides a mock function with given fields: ctx, req
func (_m *MetaService) GetMetaDirInfo(ctx context.Context, req *meta.GetMetaDirInfoReq) (*meta.GetMetaDirInfoResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetMetaDirInfo")
	}

	var r0 *meta.GetMetaDirInfoResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetMetaDirInfoReq) (*meta.GetMetaDirInfoResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetMetaDirInfoReq) *meta.GetMetaDirInfoResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetMetaDirInfoResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetMetaDirInfoReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartsAlloc provides a mock function with given fields: ctx, req
func (_m *MetaService) GetPartsAlloc(ctx context.Context, req *meta.GetPartsAllocReq) (*meta.GetPartsAllocResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPartsAlloc")
	}

	var r0 *meta.GetPartsAllocResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetPartsAllocReq) (*meta.GetPartsAllocResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetPartsAllocReq) *meta.GetPartsAllocResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetPartsAllocResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetPartsAllocReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmentId provides a mock function with given fields: ctx, req
func (_m *MetaService) GetSegmentId(ctx context.Context, req *meta.GetSegmentIdReq) (*meta.GetSegmentIdResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentId")
	}

	var r0 *meta.GetSegmentIdResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetSegmentIdReq) (*meta.GetSegmentIdResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetSegmentIdReq) *meta.GetSegmentIdResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetSegmentIdResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetSegmentIdReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, req
func (_m *MetaService) GetSession(ctx context.Context, req *meta.GetSessionReq) (*meta.GetSessionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *meta.GetSessionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetSessionReq) (*meta.GetSessionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetSessionReq) *meta.GetSessionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetSessionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetSessionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpace provides a mock function with given fields: ctx, req
func (_m *MetaService) GetSpace(ctx context.Context, req *meta.GetSpaceReq) (*meta.GetSpaceResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSpace")
	}

	var r0 *meta.GetSpaceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetSpaceReq) (*meta.GetSpaceResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetSpaceReq) *meta.GetSpaceResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetSpaceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetSpaceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields: ctx, req
func (_m *MetaService) GetStats(ctx context.Context, req *meta.GetStatsReq) (*meta.GetStatsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *meta.GetStatsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetStatsReq) (*meta.GetStatsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetStatsReq) *meta.GetStatsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetStatsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetStatsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTag provides a mock function with given fields: ctx, req
func (_m *MetaService) GetTag(ctx context.Context, req *meta.GetTagReq) (*meta.GetTagResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTag")
	}

	var r0 *meta.GetTagResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetTagReq) (*meta.GetTagResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetTagReq) *meta.GetTagResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetTagResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetTagReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) GetTagIndex(ctx context.Context, req *meta.GetTagIndexReq) (*meta.GetTagIndexResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTagIndex")
	}

	var r0 *meta.GetTagIndexResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetTagIndexReq) (*meta.GetTagIndexResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetTagIndexReq) *meta.GetTagIndexResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetTagIndexResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetTagIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: ctx, req
func (_m *MetaService) GetUserRoles(ctx context.Context, req *meta.GetUserRolesReq) (*meta.ListRolesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 *meta.ListRolesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetUserRolesReq) (*meta.ListRolesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetUserRolesReq) *meta.ListRolesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListRolesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetUserRolesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkerId provides a mock function with given fields: ctx, req
func (_m *MetaService) GetWorkerId(ctx context.Context, req *meta.GetWorkerIdReq) (*meta.GetWorkerIdResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkerId")
	}

	var r0 *meta.GetWorkerIdResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetWorkerIdReq) (*meta.GetWorkerIdResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetWorkerIdReq) *meta.GetWorkerIdResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetWorkerIdResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetWorkerIdReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZone provides a mock function with given fields: ctx, req
func (_m *MetaService) GetZone(ctx context.Context, req *meta.GetZoneReq) (*meta.GetZoneResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetZone")
	}

	var r0 *meta.GetZoneResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetZoneReq) (*meta.GetZoneResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GetZoneReq) *meta.GetZoneResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.GetZoneResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GetZoneReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantRole provides a mock function with given fields: ctx, req
func (_m *MetaService) GrantRole(ctx context.Context, req *meta.GrantRoleReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GrantRole")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GrantRoleReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.GrantRoleReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.GrantRoleReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeartBeat provides a mock function with given fields: ctx, req
func (_m *MetaService) HeartBeat(ctx context.Context, req *meta.HBReq) (*meta.HBResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for HeartBeat")
	}

	var r0 *meta.HBResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.HBReq) (*meta.HBResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.HBReq) *meta.HBResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.HBResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.HBReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KillQuery provides a mock function with given fields: ctx, req
func (_m *MetaService) KillQuery(ctx context.Context, req *meta.KillQueryReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for KillQuery")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.KillQueryReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.KillQueryReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.KillQueryReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCluster provides a mock function with given fields: ctx, req
func (_m *MetaService) ListCluster(ctx context.Context, req *meta.ListClusterInfoReq) (*meta.ListClusterInfoResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListCluster")
	}

	var r0 *meta.ListClusterInfoResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListClusterInfoReq) (*meta.ListClusterInfoResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListClusterInfoReq) *meta.ListClusterInfoResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListClusterInfoResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListClusterInfoReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigs provides a mock function with given fields: ctx, req
func (_m *MetaService) ListConfigs(ctx context.Context, req *meta.ListConfigsReq) (*meta.ListConfigsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigs")
	}

	var r0 *meta.ListConfigsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListConfigsReq) (*meta.ListConfigsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListConfigsReq) *meta.ListConfigsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListConfigsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListConfigsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEdgeIndexStatus provides a mock function with given fields: ctx, req
func (_m *MetaService) ListEdgeIndexStatus(ctx context.Context, req *meta.ListIndexStatusReq) (*meta.ListIndexStatusResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListEdgeIndexStatus")
	}

	var r0 *meta.ListIndexStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListIndexStatusReq) (*meta.ListIndexStatusResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListIndexStatusReq) *meta.ListIndexStatusResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListIndexStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListIndexStatusReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEdgeIndexes provides a mock function with given fields: ctx, req
func (_m *MetaService) ListEdgeIndexes(ctx context.Context, req *meta.ListEdgeIndexesReq) (*meta.ListEdgeIndexesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListEdgeIndexes")
	}

	var r0 *meta.ListEdgeIndexesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListEdgeIndexesReq) (*meta.ListEdgeIndexesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListEdgeIndexesReq) *meta.ListEdgeIndexesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListEdgeIndexesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListEdgeIndexesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEdges provides a mock function with given fields: ctx, req
func (_m *MetaService) ListEdges(ctx context.Context, req *meta.ListEdgesReq) (*meta.ListEdgesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListEdges")
	}

	var r0 *meta.ListEdgesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListEdgesReq) (*meta.ListEdgesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListEdgesReq) *meta.ListEdgesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListEdgesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListEdgesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFTIndexes provides a mock function with given fields: ctx, req
func (_m *MetaService) ListFTIndexes(ctx context.Context, req *meta.ListFTIndexesReq) (*meta.ListFTIndexesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListFTIndexes")
	}

	var r0 *meta.ListFTIndexesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListFTIndexesReq) (*meta.ListFTIndexesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListFTIndexesReq) *meta.ListFTIndexesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListFTIndexesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListFTIndexesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHosts provides a mock function with given fields: ctx, req
func (_m *MetaService) ListHosts(ctx context.Context, req *meta.ListHostsReq) (*meta.ListHostsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListHosts")
	}

	var r0 *meta.ListHostsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListHostsReq) (*meta.ListHostsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListHostsReq) *meta.ListHostsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListHostsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListHostsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListListener provides a mock function with given fields: ctx, req
func (_m *MetaService) ListListener(ctx context.Context, req *meta.ListListenerReq) (*meta.ListListenerResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListListener")
	}

	var r0 *meta.ListListenerResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListListenerReq) (*meta.ListListenerResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListListenerReq) *meta.ListListenerResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListListenerResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListListenerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListParts provides a mock function with given fields: ctx, req
func (_m *MetaService) ListParts(ctx context.Context, req *meta.ListPartsReq) (*meta.ListPartsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListParts")
	}

	var r0 *meta.ListPartsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListPartsReq) (*meta.ListPartsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListPartsReq) *meta.ListPartsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListPartsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListPartsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: ctx, req
func (_m *MetaService) ListRoles(ctx context.Context, req *meta.ListRolesReq) (*meta.ListRolesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *meta.ListRolesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListRolesReq) (*meta.ListRolesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListRolesReq) *meta.ListRolesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListRolesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListRolesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceClients provides a mock function with given fields: ctx, req
func (_m *MetaService) ListServiceClients(ctx context.Context, req *meta.ListServiceClientsReq) (*meta.ListServiceClientsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceClients")
	}

	var r0 *meta.ListServiceClientsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListServiceClientsReq) (*meta.ListServiceClientsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListServiceClientsReq) *meta.ListServiceClientsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListServiceClientsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListServiceClientsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields: ctx, req
func (_m *MetaService) ListSessions(ctx context.Context, req *meta.ListSessionsReq) (*meta.ListSessionsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 *meta.ListSessionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListSessionsReq) (*meta.ListSessionsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListSessionsReq) *meta.ListSessionsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListSessionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListSessionsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: ctx, req
func (_m *MetaService) ListSnapshots(ctx context.Context, req *meta.ListSnapshotsReq) (*meta.ListSnapshotsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 *meta.ListSnapshotsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListSnapshotsReq) (*meta.ListSnapshotsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListSnapshotsReq) *meta.ListSnapshotsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListSnapshotsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListSnapshotsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSpaces provides a mock function with given fields: ctx, req
func (_m *MetaService) ListSpaces(ctx context.Context, req *meta.ListSpacesReq) (*meta.ListSpacesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSpaces")
	}

	var r0 *meta.ListSpacesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListSpacesReq) (*meta.ListSpacesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListSpacesReq) *meta.ListSpacesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListSpacesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListSpacesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagIndexStatus provides a mock function with given fields: ctx, req
func (_m *MetaService) ListTagIndexStatus(ctx context.Context, req *meta.ListIndexStatusReq) (*meta.ListIndexStatusResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListTagIndexStatus")
	}

	var r0 *meta.ListIndexStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListIndexStatusReq) (*meta.ListIndexStatusResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListIndexStatusReq) *meta.ListIndexStatusResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListIndexStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListIndexStatusReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagIndexes provides a mock function with given fields: ctx, req
func (_m *MetaService) ListTagIndexes(ctx context.Context, req *meta.ListTagIndexesReq) (*meta.ListTagIndexesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListTagIndexes")
	}

	var r0 *meta.ListTagIndexesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListTagIndexesReq) (*meta.ListTagIndexesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListTagIndexesReq) *meta.ListTagIndexesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListTagIndexesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListTagIndexesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, req
func (_m *MetaService) ListTags(ctx context.Context, req *meta.ListTagsReq) (*meta.ListTagsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *meta.ListTagsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListTagsReq) (*meta.ListTagsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListTagsReq) *meta.ListTagsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListTagsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListTagsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, req
func (_m *MetaService) ListUsers(ctx context.Context, req *meta.ListUsersReq) (*meta.ListUsersResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *meta.ListUsersResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListUsersReq) (*meta.ListUsersResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListUsersReq) *meta.ListUsersResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListUsersResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListUsersReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListZones provides a mock function with given fields: ctx, req
func (_m *MetaService) ListZones(ctx context.Context, req *meta.ListZonesReq) (*meta.ListZonesResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListZones")
	}

	var r0 *meta.ListZonesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListZonesReq) (*meta.ListZonesResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ListZonesReq) *meta.ListZonesResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ListZonesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ListZonesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeZone provides a mock function with given fields: ctx, req
func (_m *MetaService) MergeZone(ctx context.Context, req *meta.MergeZoneReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MergeZone")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.MergeZoneReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.MergeZoneReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.MergeZoneReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebuildEdgeIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) RebuildEdgeIndex(ctx context.Context, req *meta.RebuildIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RebuildEdgeIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RebuildIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RebuildIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RebuildIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebuildTagIndex provides a mock function with given fields: ctx, req
func (_m *MetaService) RebuildTagIndex(ctx context.Context, req *meta.RebuildIndexReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RebuildTagIndex")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RebuildIndexReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RebuildIndexReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RebuildIndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegConfig provides a mock function with given fields: ctx, req
func (_m *MetaService) RegConfig(ctx context.Context, req *meta.RegConfigReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RegConfig")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RegConfigReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RegConfigReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RegConfigReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveListener provides a mock function with given fields: ctx, req
func (_m *MetaService) RemoveListener(ctx context.Context, req *meta.RemoveListenerReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RemoveListener")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RemoveListenerReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RemoveListenerReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RemoveListenerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSession provides a mock function with given fields: ctx, req
func (_m *MetaService) RemoveSession(ctx context.Context, req *meta.RemoveSessionReq) (*meta.RemoveSessionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSession")
	}

	var r0 *meta.RemoveSessionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RemoveSessionReq) (*meta.RemoveSessionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RemoveSessionReq) *meta.RemoveSessionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.RemoveSessionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RemoveSessionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameZone provides a mock function with given fields: ctx, req
func (_m *MetaService) RenameZone(ctx context.Context, req *meta.RenameZoneReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RenameZone")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RenameZoneReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RenameZoneReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RenameZoneReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportTaskFinish provides a mock function with given fields: ctx, req
func (_m *MetaService) ReportTaskFinish(ctx context.Context, req *meta.ReportTaskReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ReportTaskFinish")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ReportTaskReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.ReportTaskReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.ReportTaskReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreMeta provides a mock function with given fields: ctx, req
func (_m *MetaService) RestoreMeta(ctx context.Context, req *meta.RestoreMetaReq) (*meta.RestoreMetaResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RestoreMeta")
	}

	var r0 *meta.RestoreMetaResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RestoreMetaReq) (*meta.RestoreMetaResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RestoreMetaReq) *meta.RestoreMetaResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.RestoreMetaResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RestoreMetaReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeRole provides a mock function with given fields: ctx, req
func (_m *MetaService) RevokeRole(ctx context.Context, req *meta.RevokeRoleReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRole")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RevokeRoleReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.RevokeRoleReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.RevokeRoleReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunAdminJob provides a mock function with given fields: ctx, req
func (_m *MetaService) RunAdminJob(ctx context.Context, req *meta.AdminJobReq) (*meta.AdminJobResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RunAdminJob")
	}

	var r0 *meta.AdminJobResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AdminJobReq) (*meta.AdminJobResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.AdminJobReq) *meta.AdminJobResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.AdminJobResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.AdminJobReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveGraphVersion provides a mock function with given fields: ctx, req
func (_m *MetaService) SaveGraphVersion(ctx context.Context, req *meta.SaveGraphVersionReq) (*meta.SaveGraphVersionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SaveGraphVersion")
	}

	var r0 *meta.SaveGraphVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SaveGraphVersionReq) (*meta.SaveGraphVersionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SaveGraphVersionReq) *meta.SaveGraphVersionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.SaveGraphVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.SaveGraphVersionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfig provides a mock function with given fields: ctx, req
func (_m *MetaService) SetConfig(ctx context.Context, req *meta.SetConfigReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SetConfigReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SetConfigReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.SetConfigReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignInService provides a mock function with given fields: ctx, req
func (_m *MetaService) SignInService(ctx context.Context, req *meta.SignInServiceReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SignInService")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SignInServiceReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SignInServiceReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.SignInServiceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignOutService provides a mock function with given fields: ctx, req
func (_m *MetaService) SignOutService(ctx context.Context, req *meta.SignOutServiceReq) (*meta.ExecResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SignOutService")
	}

	var r0 *meta.ExecResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SignOutServiceReq) (*meta.ExecResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.SignOutServiceReq) *meta.ExecResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.ExecResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.SignOutServiceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSessions provides a mock function with given fields: ctx, req
func (_m *MetaService) UpdateSessions(ctx context.Context, req *meta.UpdateSessionsReq) (*meta.UpdateSessionsResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSessions")
	}

	var r0 *meta.UpdateSessionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.UpdateSessionsReq) (*meta.UpdateSessionsResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.UpdateSessionsReq) *meta.UpdateSessionsResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.UpdateSessionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.UpdateSessionsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyClientVersion provides a mock function with given fields: ctx, req
func (_m *MetaService) VerifyClientVersion(ctx context.Context, req *meta.VerifyClientVersionReq) (*meta.VerifyClientVersionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyClientVersion")
	}

	var r0 *meta.VerifyClientVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *meta.VerifyClientVersionReq) (*meta.VerifyClientVersionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *meta.VerifyClientVersionReq) *meta.VerifyClientVersionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.VerifyClientVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *meta.VerifyClientVersionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMetaService creates a new instance of MetaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaService {
	mock := &MetaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
