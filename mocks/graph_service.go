// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	graph "github.com/nebula-contrib/nebula-sirius/nebula/graph"
	mock "github.com/stretchr/testify/mock"

	nebula "github.com/nebula-contrib/nebula-sirius/nebula"
)

// GraphService is an autogenerated mock type for the GraphService type
type GraphService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, username, password
func (_m *GraphService) Authenticate(ctx context.Context, username []byte, password []byte) (*graph.AuthResponse, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *graph.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) (*graph.AuthResponse, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) *graph.AuthResponse); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []byte) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: ctx, sessionId, stmt
func (_m *GraphService) Execute(ctx context.Context, sessionId int64, stmt []byte) (*graph.ExecutionResponse, error) {
	ret := _m.Called(ctx, sessionId, stmt)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *graph.ExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) (*graph.ExecutionResponse, error)); ok {
		return rf(ctx, sessionId, stmt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) *graph.ExecutionResponse); ok {
		r0 = rf(ctx, sessionId, stmt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.ExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []byte) error); ok {
		r1 = rf(ctx, sessionId, stmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteJson provides a mock function with given fields: ctx, sessionId, stmt
func (_m *GraphService) ExecuteJson(ctx context.Context, sessionId int64, stmt []byte) ([]byte, error) {
	ret := _m.Called(ctx, sessionId, stmt)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteJson")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) ([]byte, error)); ok {
		return rf(ctx, sessionId, stmt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) []byte); ok {
		r0 = rf(ctx, sessionId, stmt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []byte) error); ok {
		r1 = rf(ctx, sessionId, stmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteJsonWithParameter provides a mock function with given fields: ctx, sessionId, stmt, parameterMap
func (_m *GraphService) ExecuteJsonWithParameter(ctx context.Context, sessionId int64, stmt []byte, parameterMap map[string]*nebula.Value) ([]byte, error) {
	ret := _m.Called(ctx, sessionId, stmt, parameterMap)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteJsonWithParameter")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte, map[string]*nebula.Value) ([]byte, error)); ok {
		return rf(ctx, sessionId, stmt, parameterMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte, map[string]*nebula.Value) []byte); ok {
		r0 = rf(ctx, sessionId, stmt, parameterMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []byte, map[string]*nebula.Value) error); ok {
		r1 = rf(ctx, sessionId, stmt, parameterMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteWithParameter provides a mock function with given fields: ctx, sessionId, stmt, parameterMap
func (_m *GraphService) ExecuteWithParameter(ctx context.Context, sessionId int64, stmt []byte, parameterMap map[string]*nebula.Value) (*graph.ExecutionResponse, error) {
	ret := _m.Called(ctx, sessionId, stmt, parameterMap)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteWithParameter")
	}

	var r0 *graph.ExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte, map[string]*nebula.Value) (*graph.ExecutionResponse, error)); ok {
		return rf(ctx, sessionId, stmt, parameterMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte, map[string]*nebula.Value) *graph.ExecutionResponse); ok {
		r0 = rf(ctx, sessionId, stmt, parameterMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.ExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []byte, map[string]*nebula.Value) error); ok {
		r1 = rf(ctx, sessionId, stmt, parameterMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signout provides a mock function with given fields: ctx, sessionId
func (_m *GraphService) Signout(ctx context.Context, sessionId int64) error {
	ret := _m.Called(ctx, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for Signout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyClientVersion provides a mock function with given fields: ctx, req
func (_m *GraphService) VerifyClientVersion(ctx context.Context, req *graph.VerifyClientVersionReq) (*graph.VerifyClientVersionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyClientVersion")
	}

	var r0 *graph.VerifyClientVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *graph.VerifyClientVersionReq) (*graph.VerifyClientVersionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *graph.VerifyClientVersionReq) *graph.VerifyClientVersionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.VerifyClientVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *graph.VerifyClientVersionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGraphService creates a new instance of GraphService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGraphService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GraphService {
	mock := &GraphService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
